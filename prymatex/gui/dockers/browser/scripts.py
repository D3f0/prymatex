#!/usr/bin/env python
#-*- encoding: utf-8 -*-

from prymatex.qt import QtCore

from prymatex.utils import encoding

#=======================================================================
# System process wrapper
# wrap a process for using in window context of javascript
#=======================================================================
class SystemWrapper(QtCore.QObject):
    def __init__(self, process, parent = None):
        QtCore.QObject.__init__(self, parent)
        self.process = process
        self.stdoutdata = None
        self.stderrdata = None
        
    def communicate(self, inputdata = None):
        inputdata = inputdata and encoding.to_fs(inputdata)
        stdout, stderr = self.process.communicate(inputdata)
        self.stdoutdata = encoding.from_fs(stdout)
        self.stderrdata = encoding.from_fs(stderr)
        
    @QtCore.Slot(str)
    def write(self, data):
        self.communicate(data)

    @QtCore.Slot()
    def read(self):
        if self.stdoutdata is None or self.stderrdata is None:
            self.communicate()
        return self.stdoutdata or self.stderrdata

    @QtCore.Slot()
    def close(self):
        self.process.stdout.close()
        self.process.stderr.close()
        self.process.stdin.close()
        self.process.wait()

    def outputString(self):
        return self.read()
    outputString = QtCore.Property(str, outputString)

#=======================================================================
# Custom JavaScript for using with pages generated by prymatex
#=======================================================================
WINDOW_JAVASCRIPT = """
%s
TextMate.system = function(command, callback) {
    this._system(command);
    if (callback != null) {
        
    }
    return _systemWrapper;
}
"""
    
class TextMate(QtCore.QObject):
    @QtCore.Slot(str)
    def _system(self, command):
        self.parent().runCommand(command)
            
    def isBusy(self):
        return True
    isBusy = QtCore.Property("bool", isBusy)