#!/usr/bin/env python
# coding: utf-8
'''
A PyQt implementation of CocoaDialog
based on http://cocoadialog.sourceforge.net/

'''
__version__ = '0.0.1b'


from PyQt4.Qt import *
from optparse import OptionParser, make_option
import sys

class NotSuchAction(Exception):
    pass

class CocoaDialogMixin(type):
    def __new__(cls, name, bases, attrs):
        if object not in bases:
            #print cls, name, bases, attrs
            if 'handles' not in attrs:
                raise Exception("CocoaDialog classes must provide a handles attribute")
            handles = attrs.get('handles')
            new_cls = type.__new__(cls, name, bases, attrs)
            CocoaDialogBase.handlers[handles] = new_cls
            return new_cls
        
        return type.__new__(cls, name, bases, attrs)

class CocoaDialogBase(object):
    '''
    Base class for CocoaDialog commands, please override 
        - handles
        - setup_dialog()
    '''
    __metaclass__ = CocoaDialogMixin
    handlers = {}
    #===========================================================================
    # Options taken from
    # http://cocoadialog.sourceforge.net/documentation.html#global_options
    #===========================================================================
    option_list = (
        
        make_option('--title', help = "Sets the window's title"),
        make_option('--string-output', dest = 'string_output', 
                    help = 'Makes yes/no/ok/cancel buttons return '
                    'values as "Yes", "No", "Ok", or "Cancel" instead '
                    'of integers. When used with custom button labels, returns the label you provided.'),
#        make_option('‑‑no‑newline', dest = 'no_newline', action = "store_true", default = False,
#                    help = '''By default, return values will be printed with a
#                     trailing newline. This will suppress that behavior. 
#                    Note that when a control returns multiple lines this will only 
#                    suppress the trailing newline on the last line.'''),
        make_option('--width', 
                    help = '''Sets the width of the window. It's not advisable to use this 
                    option without good reason, and some controls won't even respond 
                    to it. The automatic size of most windows should suffice.
                    '''),
        make_option('--heigh',
                    help = '''Sets the height of the window. It's not advisable to use this option
                     without good reason, and some controls won't even respond to it. 
                     The automatic size of most windows should suffice.
                    '''),
        make_option('--debug', action = 'store_true', default = False,
                    help = '''If you are not getting the results you expect, 
                    try turning on this option. When there is an error, 
                    it will print ERROR: followed by the error message.
                    '''),
    )
    
    @classmethod
    def get_handler(cls, action_name):
        handler = cls.handlers.get(action_name, None)
        if not handler:
            raise  NotSuchAction("%s is not an action." % action_name)
        return handler
    
    
    @classmethod
    def parser(cls, prog = 'CocoaDialog'):
        return OptionParser('%s ACTION option' % prog, 
                            option_list = cls.option_list, 
                            version = __version__, 
                            #conflict_handler, 
                            #description, 
                            #formatter, 
                            #add_help_option, 
                            #prog = prog, 
                            epilog = ''' Actions are: \n%s ''' % ', \n'.join(sorted(cls.handlers.keys()))
                            )
    
    def __init__(self, arguments):
        super(CocoaDialogBase, self).__init__()
        parser = self.parser()
        self.options, _extra = parser.parse_args(arguments)
        self.setup_dialog()
        
    def setup_dialog(self):
        raise NotImplementedError("Not implemented for %s (%s) yet :(" % (self.handles, type(self).__name__))

    def exec_(self):
        return self.dialog.exec_()
    
class BubbleCocoaDialog(CocoaDialogBase):
    handles = 'bubble'

class MsgBoxCocoaDialog(CocoaDialogBase):
    '''
    Options taken from
    http://cocoadialog.sourceforge.net/documentation.html#msgbox_control
    '''
    handles = 'msgbox'

    option_list = (
        make_option('--text', 
                    help = 'This is the main, bold message text.'),
        make_option('--informative-text',
                    help = '''
                    This is the extra, smaller message text.
                    '''),
        make_option('--icon', 
                    help = '''
                    The name of the stock icon to use. This is incompatible with --icon-file 
                    Default is no icon.
                    '''),
        make_option('--icon-file', 
                    help = '''
                    The full path to the custom icon image you would like to use. 
                    Almost every image format is accepted. This is incompatible with the 
                    --icon option.
                    '''),
        make_option('--float',
                    help = '''
                    Float on top of all windows.
                    '''),
        make_option('--timeout', 
                    help = '''
                    The amount of time, in seconds, that the window will be displayed 
                    if the user does not click a button.
                    Does not time out by default.
                    '''),
        make_option('--button1', 
                    help='''
                    Required. This is the right-most button.
                    '''),
        make_option('--button2', 
                    help='''
                    This is the middle button.
                    '''),
        make_option('--button3',
                    help='''
                    This is the left-most button. This will not be displayed if there is 
                    no --button2 label specified.
                    '''),
        
    ) + CocoaDialogBase.option_list
    
    def setup_dialog(self):
        self.dialog = QDialog()
        layout = QVBoxLayout()
        self.dialog.setLayout(layout)
        if self.options.text:
            layout.addWidget(QLabel(self.options.text))
        layout_buttons = QHBoxLayout()
        layout.addLayout(layout_buttons)
        if self.options.button1:
            layout_buttons.addWidget(QPushButton(self.options.button1))
        if self.options.button2:
            layout_buttons.addWidget(QPushButton(self.options.button2))
        if self.options.button3:
            layout_buttons.addWidget(QPushButton(self.options.button3))
            
   

class OkMsgBoxCocoaDialog(CocoaDialogBase):
    handles = 'ok-msgbox'
    
class YesNoMsgBoxCocoaDialog(CocoaDialogBase):
    handles = 'yesno-msgbox'


class InputboxCocoaDialog(CocoaDialogBase):
    handles = 'inputbox'
    

class StandardInputBoxCocoaDialog(CocoaDialogBase):
    handles = 'standard-inputbox'

class SecureInputBoxCocoaDialog(CocoaDialogBase):
    handles = 'secure-inputbox'
    
class SecureStandarInputBoxCocoaDialog(CocoaDialogBase):
    handles = 'secure-standard-inputbox'

class FileSelectCocoaDialog(CocoaDialogBase):
    handles = 'fileselect'
    
class FileSaveCocoaDialog(CocoaDialogBase):
    handles = 'filesave'
    

class TextboxCocoaDialog(CocoaDialogBase):
    handles = 'textbox'
    
class ProgressBarCocoaDialog(CocoaDialogBase):
    handles = 'progressbar'
    
class DropdownCocoaDialog(CocoaDialogBase):
    handles = 'dropdown'

class StandardDropdownCocoaDialog(CocoaDialogBase):
    handles = 'standard-dropdown'

class CocoaDialogApp(QApplication):
    
    def __init__(self, argv):
        super(CocoaDialogApp, self).__init__([])
        self.application_arguments = argv
        
    def build_dialog(self):
        action_name = self.application_arguments[1]
        if action_name.startswith('-'):
            raise IndexError()
        HandlerClass = CocoaDialogBase.get_handler(action_name)
        dialog_arguments = self.application_arguments[2:]
        self.handler = HandlerClass(dialog_arguments)
        
    def exec_dialog(self):
        return self.handler.exec_()
        

def main(argv = sys.argv):
    ''' Entry point '''
    app = CocoaDialogApp(argv)
    try:
        app.build_dialog()
    except NotSuchAction, e:
        print 
        print e
        print
        CocoaDialogBase.parser(argv[0]).print_help()
        return
    
    except IndexError:
        CocoaDialogBase.parser(argv[0]).print_help()
        return
    except NotImplementedError, e:
        print e
        return -1
    return app.exec_dialog()

if __name__ == '__main__':
    sys.exit(main())